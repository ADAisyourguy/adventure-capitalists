{"version":3,"sources":["components/CountDown/CountDown.js","components/Progress/Progress.js","redux/actions.js","redux/actionTypes.js","components/Business/Business.js","components/Managers/Managers.js","App.js","serviceWorker.js","utils/number.js","redux/reducers/balance.js","redux/reducers/businesses.js","data/businesses.js","redux/reducers/managers.js","data/managers.js","redux/reducers/index.js","localStorage.js","redux/store.js","utils/game.js","index.js"],"names":["CountDown","timeTaken","timeAlreadyRun","onComplete","autoStart","uuid","useState","timeLeft","setTimeLeft","intervalRef","useRef","useEffect","endTime","Date","getTime","Number","current","setInterval","currentTime","clearInterval","className","formatTime","secondsLeft","Math","ceil","hours","floor","minutes","seconds","String","padStart","Progress","width","setWidth","startTime","style","setLastRun","businessId","type","payload","Business","id","name","price","lastRun","hasManager","quantityPurchased","icon","profit","uuidv4","setUuid","running","setRunning","setTimeAlreadyRun","dispatch","useDispatch","balance","useSelector","state","runBusinessManually","e","preventDefault","buy","amount","qty","now","onClick","src","alt","toLocaleString","Managers","managers","showModal","setShowModal","available","find","manager","hired","class","filter","map","key","description","disabled","item","App","businesses","Object","values","Boolean","window","location","hostname","match","round","num","precision","isNaN","p","c","EPSILON","initialState","lemonade_stand","newspaper_delivery","car_wash","pizza_delivery","donut_shop","shrimp_boat","hockey_team","movie_studio","bank","oil_company","combineReducers","action","business","getCloseTime","time","localStorage","getItem","error","console","warn","store","createStore","rootReducer","serializedState","earning","closeTime","forEach","elapsedSeconds","completedTimes","processBackgroundCalculating","JSON","parse","loadState","subscribe","setItem","stringify","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","addEventListener","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.655ed826.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\n// Time in milisecond\nexport function CountDown({timeTaken, timeAlreadyRun, onComplete = () => {}, autoStart, uuid}) {\n  const [timeLeft, setTimeLeft] = useState(timeTaken - timeAlreadyRun);\n  const intervalRef = useRef();\n  useEffect(() => {\n    setTimeLeft(timeTaken - timeAlreadyRun);\n    if (!autoStart) {\n      return;\n    }\n    const startTime = (new Date()).getTime();\n    const endTime = startTime + timeTaken - Number(timeAlreadyRun);\n\n    intervalRef.current = setInterval(() => {\n      const currentTime = (new Date()).getTime();\n      if (endTime > currentTime) {\n        setTimeLeft(endTime - currentTime);\n      } else {\n        clearInterval(intervalRef.current);\n        onComplete();\n      }\n    }, 10);\n\n    return () => {\n      clearInterval(intervalRef.current);\n    }\n  // eslint-disable-next-line\n  }, [uuid, autoStart]);\n\n  return (\n    <div className=\"count-down-timer\">\n      {formatTime(timeLeft)}\n    </div>\n  );\n}\n\nconst formatTime = (timeLeft) => {\n  let secondsLeft = Math.ceil(timeLeft/1000);\n  const hours = Math.floor(secondsLeft / 3600);\n  secondsLeft %= 3600;\n  const minutes = Math.floor(secondsLeft / 60);\n  const seconds = secondsLeft % 60;\n  return String(hours).padStart(2, '0') + ':' +\n    String(minutes).padStart(2, '0') + ':' +\n    String(seconds).padStart(2, '0');\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport './Progress.css';\n\nexport function Progress({timeTaken, timeAlreadyRun, uuid, autoStart}) {\n  const [width, setWidth] = useState(0);\n  const intervalRef = useRef();\n  \n  useEffect(() => {\n    setWidth(0);\n    if (!autoStart) {\n      return;\n    }\n    const startTime = (new Date()).getTime() - timeAlreadyRun;\n\n    intervalRef.current = setInterval(() => {\n      const currentTime = (new Date()).getTime();\n\n      const width = 100*(currentTime - startTime)/timeTaken;\n      setWidth(`${width}%`);\n      if (width >= 100) {\n        clearInterval(intervalRef.current);\n      }\n    });\n\n    return () => {\n      clearInterval(intervalRef.current);\n    }\n  // eslint-disable-next-line\n  }, [uuid, autoStart]);\n\n  return (\n    <div className=\"progress-bar\">\n      <span style={{width}}></span>\n    </div>\n  );\n}\n","import { INCREASE_BALANCE, DECREASSE_BALANCE, BUY_BUSINESS, SET_LAST_RUN, HIRE_MANAGER } from './actionTypes';\n\nexport const increaseBalance = amount => ({\n  type: INCREASE_BALANCE,\n  payload: {\n    amount\n  }\n});\n\nexport const decreaseBalance = amount => ({\n  type: DECREASSE_BALANCE,\n  payload: {\n    amount\n  }\n});\n\nexport const buyBusiness = (businessId, qty) => ({\n  type: BUY_BUSINESS,\n  payload: {\n    businessId,\n    qty\n  }\n});\n\nexport const setLastRun = (businessId) => ({\n  type: SET_LAST_RUN,\n  payload: {\n    businessId\n  }\n});\n\nexport const hireManager = (manager) => ({\n  type: HIRE_MANAGER,\n  payload: {\n    manager\n  }\n});","export const INCREASE_BALANCE = \"INCREASE_BALANCE\";\nexport const DECREASSE_BALANCE = \"DECREASSE_BALANCE\";\nexport const BUY_BUSINESS = \"BUY_BUSINESS\";\nexport const SET_LAST_RUN = \"SET_LAST_RUN\";\nexport const HIRE_MANAGER = \"HIRE_MANAGER\";\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CountDown } from '../CountDown';\nimport { Progress } from '../Progress';\nimport { v4 as uuidv4 } from 'uuid';\nimport { increaseBalance, decreaseBalance, buyBusiness, setLastRun } from '../../redux/actions';\nimport './Business.css';\n\nexport function Business({id, name, price, lastRun, timeTaken, hasManager, quantityPurchased, icon, profit}) {\n  const [uuid, setUuid] = useState(uuidv4());\n  const [running, setRunning] = useState(hasManager);\n  const [timeAlreadyRun, setTimeAlreadyRun] = useState(0);\n  const dispatch = useDispatch();\n  const balance = useSelector(state => state.balance);\n\n  const runBusinessManually = (e) => {\n    e.preventDefault();\n    if (!running) {\n      setUuid(uuidv4());\n      setRunning(true);\n      dispatch(setLastRun(id));\n    }\n  }\n\n  const onComplete = () => {\n    setTimeAlreadyRun(0);\n    setRunning(hasManager);\n    dispatch(increaseBalance(profit));\n    if (hasManager) {\n      setUuid(uuidv4());\n      dispatch(setLastRun(id));\n    }\n  }\n\n  const buy = () => {\n    if (balance.amount >= price) {\n      dispatch(buyBusiness(id, 1));\n      dispatch(decreaseBalance(price));\n    }\n  }\n\n  useEffect(() => {\n    if (hasManager) {\n      setUuid(uuidv4());\n      setRunning(true);\n      dispatch(setLastRun(id));\n    }\n  // eslint-disable-next-line\n  }, [hasManager]);\n\n  useEffect(() => {\n    const now = (new Date()).getTime();\n    if (lastRun && now - lastRun < timeTaken) {\n      setTimeAlreadyRun(now - lastRun);\n      setRunning(true);\n    }\n  // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"business\">\n      {!!quantityPurchased &&\n        <>\n        <div className=\"business-icon\" onClick={runBusinessManually}>\n          <img src={`/images/${icon}`} alt=\"icon\" width=\"60\"/>\n          <div className=\"business-quantity\">{quantityPurchased}</div>\n        </div>\n        <div className=\"business-content\">\n          <div className=\"business-progress\" onClick={runBusinessManually}>\n            <Progress timeTaken={timeTaken} timeAlreadyRun={timeAlreadyRun} uuid={uuid} autoStart={running}/>\n            <span className=\"business-profit\">${profit.toLocaleString()}</span>\n          </div>\n          <div className=\"business-buy-and-timer\">\n            <div className={'business-buy' + (balance.amount >= price ? ' active' : '')}\n              onClick={buy}>\n              <span>Buy</span><span>${price.toLocaleString()}</span>\n            </div>\n            <div className=\"business-timer\">\n              <CountDown timeTaken={timeTaken} timeAlreadyRun={timeAlreadyRun} autoStart={running} uuid={uuid} onComplete={onComplete}/>\n            </div>\n          </div>\n        </div>\n        </>\n      }\n      {!quantityPurchased &&\n        <div className={'business-unpurchased' + (balance.amount >= price ? ' active' : '')}\n          onClick={buy}>\n          <span>{name}</span><br/>\n          <span className=\"price\">${price.toLocaleString()}</span>\n        </div>\n      }\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { hireManager } from '../../redux/actions';\n\nimport './Managers.css';\n\n\nexport function Managers() {\n  const managers = useSelector(state => state.managers);\n  const balance = useSelector(state => state.balance);\n  const [showModal, setShowModal] = useState(false);\n\n  const available = !!managers.find(manager => manager.price <= balance.amount && !manager.hired);\n  const dispatch = useDispatch();\n\n  const hire = (item) => {\n    if (item.price <= balance.amount) {\n      dispatch(hireManager(item));\n    }\n  }\n\n  return (\n    <div>\n      <div className={'manager-btn' + (available ? ' active': '')}\n        onClick={() => setShowModal(true)}>Managers</div>\n      {showModal &&\n        <div className=\"managers-model\">\n          <div className=\"modal-content\">\n            <div className=\"modal-close\" onClick={() => setShowModal(false)}>\n              <img src=\"/images/close.png\" width=\"50\" alt=\"Close\" />\n            </div>\n            <h2>Managers</h2>\n            <p className=\"sub-title\">Managers make life easier!<br/>\n              Hire one to run your business for you.\n            </p>\n            <div class=\"manager-list\">\n              {managers.filter(manager => !manager.hired).map(manager => \n                <div key={manager.businessId} className=\"manager\">\n                  <div className=\"manager-info\">\n                    <div className=\"manager-name\">{manager.name}</div>\n                    <div className=\"manager-desc\">{manager.description}</div>\n                    <div className=\"manager-price\">${manager.price.toLocaleString()}</div>\n                  </div>\n                  <button disabled={manager.price > balance.amount} onClick={() => { hire(manager) }}>\n                    Hire\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.css';\nimport { Business } from './components/Business';\nimport { Managers } from './components/Managers';\n\nfunction App() {\n  const balance = useSelector(state => state.balance);\n  const businesses = useSelector(state => state.businesses);\n\n  return (\n    <div className=\"App\">\n      <div className=\"side-bar\">\n        <img src=\"/images/capitalist.png\" width=\"150\" alt=\"Capitalist\"/>\n        <Managers/>\n      </div>\n      <div className=\"main\">\n        <div className=\"balance\">\n          <span>${balance.amount.toLocaleString()}</span>\n        </div>\n        <div className=\"businesses\">\n          {Object.values(businesses).map(item => \n            <Business {...item} timeTaken={item.timeTaken*1000} key={item.id} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const round = (num, precision = 2) => {\n  if (isNaN(num)) {\n    return 0;\n  }\n  let p = 1;\n  while (precision-- > 0) p *= 10;\n\n  // epsilon correction\n  const c = 0.5 * Number.EPSILON * num;\n  return Math.round((num + c) * p) / p;\n}\n","import { round } from '../../utils/number';\nimport { INCREASE_BALANCE, DECREASSE_BALANCE } from \"../actionTypes\";\n\n\nconst initialState = {\n  amount: 0\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INCREASE_BALANCE: {\n      return {\n        amount: round(state.amount + action.payload.amount)\n      };\n    }\n    case DECREASSE_BALANCE: {\n      return {\n        amount: round(state.amount - action.payload.amount)\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { BUY_BUSINESS, HIRE_MANAGER, SET_LAST_RUN } from \"../actionTypes\";\nimport businesses from '../../data/businesses';\nimport { round } from '../../utils/number';\n\nconst initialState = businesses;\nconst PROFIT_FROM_PRICE = 0.3;\nconst PRICE_GAIN = 1.1;\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case BUY_BUSINESS: {\n      const businessId = action.payload.businessId;\n      const business = state[businessId];\n      const qty = action.payload.qty;\n      const price = round(business.price * PRICE_GAIN * qty);\n      const profit = round(business.profit + business.price * qty * PROFIT_FROM_PRICE);\n      return {\n        ...state,\n        [businessId]: {\n          ...business,\n          quantityPurchased: business.quantityPurchased + qty,\n          price,\n          profit,\n        }\n      };\n    }\n    case SET_LAST_RUN:\n      const business = state[action.payload.businessId];\n\n      return {\n        ...state,\n        [business.id]: {\n          ...business,\n          lastRun: (new Date()).getTime()\n        }\n      }\n    case HIRE_MANAGER: {\n      const business = state[action.payload.manager.businessId];\n      return {\n        ...state,\n        [business.id]: {\n          ...business,\n          hasManager: true\n        }\n      }\n    }\n    default:\n      return state;\n  }\n}\n","const businesses = {\n  lemonade_stand: {\n    id: 'lemonade_stand',\n    name: 'Lemonade stand',\n    price: 1,\n    timeTaken: 1,\n    quantityPurchased: 1,\n    hasManager: false,\n    profit: 1,\n    icon: 'lemon.png',\n  },\n  newspaper_delivery: {\n    id: 'newspaper_delivery',\n    name: 'Newspaper Deliver',\n    price: 30,\n    timeTaken: 3,\n    quantityPurchased: 0,\n    hasManager: false,\n    profit: 25,\n    icon: 'newspaper.png',\n  },\n  car_wash: {\n    id: 'car_wash',\n    name: 'Car Wash',\n    price: 500,\n    timeTaken: 6,\n    quantityPurchased: 0,\n    hasManager: false,\n    profit: 300,\n    icon: 'car.png',\n  },\n  pizza_delivery: {\n    id: 'pizza_delivery',\n    name: 'Pizza Delivery',\n    price: 3000,\n    timeTaken: 12,\n    quantityPurchased: 0,\n    hasManager: false,\n    profit: 2000,\n    icon: 'pizza.png',\n  },\n  donut_shop: {\n    id: 'donut_shop',\n    name: 'Donut Shop',\n    price: 50000,\n    timeTaken: 30,\n    quantityPurchased: 0,\n    hasManager: false,\n    profit: 20000,\n    icon: 'donut.png',\n  },\n  shrimp_boat: {\n    id: 'shrimp_boat',\n    name: 'Shrimp Boat',\n    price: 800000,\n    timeTaken: 90,\n    quantityPurchased: 0,\n    hasManager: false,\n    profit: 400000,\n    icon: 'boat.png',\n  },\n  hockey_team: {\n    id: 'hockey_team',\n    name: 'Hockey Team',\n    price: 6000000,\n    timeTaken: 600,\n    quantityPurchased: 0,\n    hasManager: false,\n    profit: 4000000,\n    icon: 'hockey.png',\n  },\n  movie_studio: {\n    id: 'movie_studio',\n    name: 'Movie Studio',\n    price: 100000000,\n    timeTaken: 3600,\n    quantityPurchased: 0,\n    hasManager: false,\n    profit: 40000000,\n    icon: 'movie.png',\n  },\n  bank: {\n    id: 'bank',\n    name: 'Bank',\n    price: 5000000000,\n    timeTaken: 36000,\n    quantityPurchased: 0,\n    hasManager: false,\n    profit: 1000000000,\n    icon: 'bank.png',\n  },\n  oil_company: {\n    id: 'oil_company',\n    name: 'Oil Company',\n    price: 153434564431,\n    timeTaken: 36000,\n    quantityPurchased: 0,\n    hasManager: false,\n    profit: 51434564431,\n    icon: 'company.png',\n  },\n};\n\nexport default businesses;\n","import { HIRE_MANAGER } from \"../actionTypes\";\nimport managers from '../../data/managers';\n\nconst initialState = managers;\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case HIRE_MANAGER: {\n      const manager = action.payload.manager;\n      manager.hired = true;\n      return [\n        ...state,\n        manager\n      ];\n    }\n    default:\n      return state;\n  }\n}\n","const managers = [\n  {\n    name: 'Alex',\n    businessId: 'lemonade_stand',\n    description: 'Run Lemonade Stands',\n    price: 20,\n    hired: false\n  },\n  {\n    name: 'Catherine',\n    businessId: 'newspaper_delivery',\n    description: 'Run Newspaper Deliveries',\n    price: 60,\n    hired: false\n  },\n  {\n    name: 'Terry',\n    businessId: 'car_wash',\n    description: 'Run Car Washes',\n    price: 1500,\n    hired: false\n  },\n  {\n    name: 'Peter',\n    businessId: 'pizza_delivery',\n    description: 'Run Pizza Deliveries',\n    price: 6000,\n    hired: false\n  },\n  {\n    name: 'Simon',\n    businessId: 'donut_shop',\n    description: 'Run Donut Shops',\n    price: 100000,\n    hired: false\n  },\n  {\n    name: 'Trump',\n    businessId: 'shrimp_boat',\n    description: 'Run Shrimp Boats',\n    price: 1000000,\n    hired: false\n  },\n  {\n    name: 'Stefani',\n    businessId: 'hockey_team',\n    description: 'Run Hockey Teams',\n    price: 8000000,\n    hired: false\n  },\n  {\n    name: 'Louis',\n    businessId: 'movie_studio',\n    description: 'Run Movie Studios',\n    price: 200000000,\n    hired: false\n  },\n  {\n    name: 'Jessica',\n    businessId: 'bank',\n    description: 'Run Banks',\n    price: 8000000000,\n    hired: false\n  },\n  {\n    name: 'Tony',\n    businessId: 'oil_company',\n    description: 'Run Oil Companies',\n    price: 353434564431,\n    hired: false\n  },\n];\n\nexport default managers;","import { combineReducers } from \"redux\";\nimport balance from \"./balance\";\nimport businesses from \"./businesses\";\nimport managers from \"./managers\";\n\nexport default combineReducers({ balance, businesses, managers });\n","import { processBackgroundCalculating } from './utils/game';\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('AC_State');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return processBackgroundCalculating(JSON.parse(serializedState));\n  } catch (error) {\n    console.warn(error);\n    return undefined;\n  }\n}\n\nexport const saveState = (state) => {\n  try {\n    localStorage.setItem('AC_State', JSON.stringify(state));\n  } catch (error) {\n    console.warn(error);\n  }\n}\n\nexport const getCloseTime = () => {\n  try {\n    const time = localStorage.getItem('AC_CloseTime');\n    if (time === null) {\n      return undefined;\n    }\n    return Number(time);\n  } catch (error) {\n    console.warn(error);\n    return undefined;\n  }\n}\n\nexport const saveCloseTime = () => {\n  try {\n    localStorage.setItem('AC_CloseTime', (new Date().getTime()));\n  } catch (error) {\n    console.warn(error);\n  }\n}","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport { loadState, saveState } from '../localStorage';\n\n// const store = createStore(rootReducer);\nconst store = createStore(rootReducer, loadState());\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nexport default store;","import { getCloseTime } from '../localStorage';\n\nexport const processBackgroundCalculating = state => {\n\n  let earning = 0;\n  const now = (new Date()).getTime();\n  const closeTime = getCloseTime() || now;\n\n  Object.values(state.businesses).forEach(item => {\n    // auto running businesses\n    if (item.quantityPurchased && item.hasManager && item.lastRun) {\n      const elapsedSeconds = Math.floor((now - item.lastRun)/1000);\n      const completedTimes = Math.floor(elapsedSeconds/item.timeTaken);\n      earning += completedTimes * item.profit;\n      // Set new lastRun\n      item.lastRun += completedTimes*item.timeTaken*1000;\n    }\n    if (item.quantityPurchased && item.hasManager && !item.lastRun) {\n      item.lastRun = now;\n    }\n\n    // businesses that started but not completed when window closing.\n    if (item.quantityPurchased && !item.hasManager && item.lastRun \n      && (closeTime - item.lastRun) < item.timeTaken * 1000)  {\n      if ((now - item.lastRun) >= item.timeTaken * 1000) {\n        earning += item.profit;\n      }\n    }\n    state.businesses[item.id] = item;\n  });\n  state.balance.amount += earning;\n  return state;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { saveCloseTime } from './localStorage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nwindow.addEventListener('unload', saveCloseTime);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}